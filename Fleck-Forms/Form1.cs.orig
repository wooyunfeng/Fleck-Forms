using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Fleck.aiplay;
using Fleck;
using System.Threading;
using System.Collections;
using System.Diagnostics;


namespace Fleck_Forms
{
    class ListViewNF : System.Windows.Forms.ListView
    {
        public ListViewNF()
        {
            // 开启双缓冲
            this.SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true);

            // Enable the OnNotifyMessage event so we get a chance to filter out 
            // Windows messages before they get to the form's WndProc
            this.SetStyle(ControlStyles.EnableNotifyMessage, true);
        }

        protected override void OnNotifyMessage(Message m)
        {
            //Filter out the WM_ERASEBKGND message
            if (m.Msg != 0x14)
            {
                base.OnNotifyMessage(m);
            }

        }


    }
    public partial class Form1 : Form
    {
<<<<<<< master
=======
        //1.声明自适应类实例
        AutoSizeFormClass asc = new AutoSizeFormClass();
        string Port = "9001";
>>>>>>> local
        public Form1()
        {
            addListDelegate = new AddConnectionItem(AddListItemMethod);
            removeListDelegate = new RemoveConnectionListItem(RemoveListItemMethod);
            addMsgDelegate = new AddMsgItem(AddMsgItemMethod);

            InitializeComponent();            
        }
        
        private void Form1_Load(object sender, EventArgs e)
        {
<<<<<<< master
            InitListView();     
=======

            asc.controllInitializeSize(this);
            InitListView();
            comm = new Engine();
            comm.Port = Port;
            comm.Start();
            comm.bRedis = m_Redis.Checked;
>>>>>>> local
            countQueue = new Queue();
            MsgCount = 0;
            RunTime = System.DateTime.Now;

            comm = new Engine();
            comm.Start();

            FleckLog.Level = LogLevel.Info;
            var server = new WebSocketServer("ws://0.0.0.0:" + Setting.port);
            
            server.Start(socket =>
            {
                socket.OnOpen = () =>
                {
                    AddConnection(socket);
                    comm.OnOpen(socket);                    
                };
                socket.OnClose = () =>
                {
                    DelConnection(socket);
                    comm.OnClose(socket);
                };
                socket.OnMessage = message =>
                {                                       
                    comm.OnMessage(socket, message);
                    Role role = comm.GetRoleAt(socket);
<<<<<<< master
                    string[] parameters = { DateTime.Now.ToLongTimeString(), role.GetAddr(), role.GetMsgCount().ToString(), message };
                    AddMsg(parameters); 
                };
            });


        }

        private void AddMsg(string[] parameters)
=======
                    string[] names = { DateTime.Now.ToLongTimeString(), role.GetAddr(), role.GetMsgCount().ToString(), message };
                   // comm.WriteInfo(role.GetAddr() + "  " + role.GetMsgCount().ToString() + "  " + message);                    
                    AddMsg(names);
                };
            });
        }

        
        private void AddMsg(string [] param)
>>>>>>> local
        {
            try
            {
                MsgCount++;
<<<<<<< master
                this.Invoke(this.addMsgDelegate, new Object[] { parameters });
=======
                this.Invoke(this.addMsgDelegate, new Object[] { param });
>>>>>>> local
            }
            catch (System.Exception ex)
            {
                comm.AddOutput(ex.Message);
            }
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            if (comm != null)
            {
                string m_online = comm.getUserCount().ToString();

                string m_msg = MsgCount.ToString() + " 个";

                countQueue.Enqueue(MsgCount);
                if (countQueue.Count > 60)
                {
                    countQueue.Dequeue();
                }
                string m_speed = (MsgCount - (int)countQueue.Peek()).ToString() + " 个/分钟";

                string m_undo = comm.getMsgQueueCount().ToString() + " 个";

                string m_time = RunTime.ToString();

                DateTime currentTime = System.DateTime.Now;
                TimeSpan span = currentTime.Subtract(RunTime);
                string m_span = span.Days + "天" + span.Hours + "时" + span.Minutes + "分" + span.Seconds + "秒";

                string m_CPU = comm.getCurrentCpuUsage();
                string m_Memory = comm.getAvailableRAM();

                string[] parameters = { DateTime.Now.ToLongTimeString(), m_online, m_msg, m_speed, m_undo, m_CPU, m_Memory, m_time, m_span };
                AddListViewItem(listView4, parameters, 0);

                //显示引擎信息
                lock (comm.OutputEngineQueue)
                {
                    int num = comm.OutputEngineQueue.Count;
                    for (int i = 0; i < num; i++ )
                    {
                        string outputmessage = (string)comm.OutputEngineQueue.Dequeue();
                        string[] parameters1 = { DateTime.Now.ToLongTimeString(), outputmessage };
                        AddListViewItem(listView3, parameters1);
                    }
                }               
            }
        }

        private void InitListView()
        {
            listView1.GridLines = true;
            //单选时,选择整行
            listView1.FullRowSelect = true;
            //显示方式
            listView1.View = View.Details;
            //没有足够的空间显示时,是否添加滚动条
            listView1.Scrollable = true;
            //是否可以选择多行
            listView1.MultiSelect = false;

            listView1.View = View.Details;
            listView1.Columns.Add("时间", 60);
            listView1.Columns.Add("用户", 132);
            listView1.Columns.Add("状态", 73);

            listView2.GridLines = true;
            //单选时,选择整行
            listView2.FullRowSelect = true;
            //显示方式
            listView2.View = View.Details;
            //没有足够的空间显示时,是否添加滚动条
            listView2.Scrollable = true;
            //是否可以选择多行
            listView2.MultiSelect = false;

            listView2.View = View.Details;
            listView2.Columns.Add("时间", 60);
            listView2.Columns.Add("用户", 132);
            listView2.Columns.Add("序号", 40);
            listView2.Columns.Add("命令", 150);

            listView3.GridLines = true;
            //单选时,选择整行
            listView3.FullRowSelect = true;
            //显示方式
            listView3.View = View.Details;
            //没有足够的空间显示时,是否添加滚动条
            listView3.Scrollable = true;
            //是否可以选择多行
            listView3.MultiSelect = false;

            listView3.View = View.Details;
            listView3.Columns.Add("时间", 60);
            listView3.Columns.Add("命令", 400);

            listView4.GridLines = true;
            //单选时,选择整行
            listView4.FullRowSelect = true;
            //显示方式
            listView4.View = View.Details;
            //没有足够的空间显示时,是否添加滚动条
            listView4.Scrollable = true;
            //是否可以选择多行
            listView4.MultiSelect = false;

            listView4.View = View.Details;
            listView4.Columns.Add("  时间", 60, HorizontalAlignment.Center);
            listView4.Columns.Add("在线用户", 100, HorizontalAlignment.Center);
            listView4.Columns.Add("接受请求", 100, HorizontalAlignment.Center);
            listView4.Columns.Add("处理速度", 100, HorizontalAlignment.Center);
            listView4.Columns.Add("未处理", 100, HorizontalAlignment.Center);
            listView4.Columns.Add("CPU使用", 100, HorizontalAlignment.Center);
            listView4.Columns.Add("剩余内存", 100, HorizontalAlignment.Center);
            listView4.Columns.Add("启动时间", 200, HorizontalAlignment.Center);
            listView4.Columns.Add("运行时间", 100, HorizontalAlignment.Center);
        }

        private void AddListViewItem(ListView listView, string[] array,int showLines = 28)
        {
            if (listView.Items.Count > showLines)
            {
                listView.Items.Clear();
            }

            listView.BeginUpdate();
            ListViewItem lvItem;
            ListViewItem.ListViewSubItem lvSubItem;
            lvItem = new ListViewItem();
            lvItem.Text = array[0];
            listView.Items.Add(lvItem);

            for (int x = 1; x < array.Length; x++)
            {
                lvSubItem = new ListViewItem.ListViewSubItem();
                lvSubItem.Text = array[x];
                lvItem.SubItems.Add(lvSubItem);
            }
            listView.EndUpdate();
        }

        Engine comm;
        DateTime RunTime;
        int MsgCount;
        Queue countQueue;

        //安全调用控件
        public delegate void AddConnectionItem(IWebSocketConnection socket);
        public AddConnectionItem addListDelegate;

        public delegate void AddMsgItem(string [] message);
        public AddMsgItem addMsgDelegate;

        public delegate void RemoveConnectionListItem(IWebSocketConnection socket);
        public RemoveConnectionListItem removeListDelegate;

        public void AddMsgItemMethod(string [] message)
        {
<<<<<<< master
            try
            {
                AddListViewItem(listView2, message);
                comm.AddtoSQLite(message);
                System.Threading.Thread.Sleep(1);
            }
            catch (System.Exception ex)
            {
                comm.AddOutput(ex.Message);
            }           
=======
            comm.SQLite_Insert(message);
            AddListViewItem(listView2, message);
            System.Threading.Thread.Sleep(1);
>>>>>>> local
        }

        public void AddListItemMethod(IWebSocketConnection socket)
        {
            string address = socket.ConnectionInfo.ClientIpAddress;
            string port = socket.ConnectionInfo.ClientPort.ToString();
            string str = address + ":" + port;

            string[] parameters = { DateTime.Now.ToLongTimeString(), str, "connected!" };
            AddListViewItem(listView1, parameters);

            add(address, port);

        }

        public void add(string address, string port)
        {
            TreeNode tn;
            string str;
            bool isfind = false;
            int index = 0;
            for (index = 0; index < treeView1.Nodes.Count; index++)
            {
                str = treeView1.Nodes[index].Text;
                if (str.IndexOf(address) != -1)
                {
                    isfind = true;
                    break;
                }
            }

            if (isfind)
            {
                tn = treeView1.Nodes[index];
                tn.Name = tn.Text = address+"("+(tn.Nodes.Count+1)+")";
            }
            else
            {
                tn = new TreeNode();
                tn.Name = tn.Text = address;
                treeView1.Nodes.Add(tn);
            }

            tn.Nodes.Add(port);
            System.Threading.Thread.Sleep(1);
        }

        public void RemoveListItemMethod(IWebSocketConnection socket)
        {
            string address = socket.ConnectionInfo.ClientIpAddress;
            string port = socket.ConnectionInfo.ClientPort.ToString();
            string str = address + ":" + port;

            string[] parameters = { DateTime.Now.ToLongTimeString(), str, "closed!" };
            AddListViewItem(listView1, parameters);

            remove(address, port);            
        }

        public void remove(string address, string port)
        {
            TreeNode tn;
            string str;
            try
            {
                for (int i = 0; i < treeView1.Nodes.Count; i++)
                {
                    str = treeView1.Nodes[i].Text;
                    if (str.IndexOf(address) != -1)
                    {
                        tn = treeView1.Nodes[i];

                        if (tn.Nodes.Count > 1)
                        {
                            for (int j = 0; j < tn.Nodes.Count; j++)
                            {
                                str = tn.Nodes[j].Text;
                                if (str.IndexOf(port) != -1)
                                {
                                    tn.Nodes.Remove(tn.Nodes[j]);
                                    break;
                                }
                            }

                            if (tn.Nodes.Count > 1)
                            {
                                tn.Name = tn.Text = address + "(" + tn.Nodes.Count + ")";
                            }
                            else
                            {
                                tn.Name = tn.Text = address;
                            }

                        }
                        else
                        {
                            treeView1.Nodes.Remove(tn);
                        }

                        break;
                    }
                }

                System.Threading.Thread.Sleep(1);
            }
            catch (System.Exception ex)
            {
                comm.AddOutput(ex.Message); 
            }
 
            
        }
        
        public void AddMsg(string str)
        {           
            try
            { 
                MsgCount++;
                this.Invoke(this.addMsgDelegate, new Object[] { str });
            }
            catch (System.Exception ex)
            {
                comm.AddOutput(ex.Message);
            }
        }

        public void DelConnection(IWebSocketConnection socket)
        {
            try
            {
                this.Invoke(this.removeListDelegate, new Object[] { socket });
            }
            catch (System.Exception ex)
            {
                comm.AddOutput(ex.Message);
            }
        }

        private void AddConnection(IWebSocketConnection socket)
        {
            try
            {
                this.Invoke(this.addListDelegate, new Object[] { socket });
            }
            catch (System.Exception ex)
            {
                comm.AddOutput(ex.Message);
            }
        }

        private void btn_expend_Click(object sender, EventArgs e)
        {
            treeView1.ExpandAll();
        }

        private void btn_closeall_Click(object sender, EventArgs e)
        {
            treeView1.CollapseAll();
        }

        private void btn_reset_Click(object sender, EventArgs e)
        {
            comm.resetEngine();
        }

        private void btn_clear_Click(object sender, EventArgs e)
        {
            listView1.Items.Clear();
            listView2.Items.Clear();
            listView3.Items.Clear();
            listView4.Items.Clear();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            comm.stopEngine();
        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            comm.bJson = m_checkJson.Checked;
        }

        private void button2_Click(object sender, EventArgs e)
        {
<<<<<<< master
            comm.test();
=======

>>>>>>> local
        }

        private void checkCloudAPI_CheckedChanged(object sender, EventArgs e)
        {
            Setting.isSupportCloudApi = checkCloudAPI.Checked;
        }       
        
    }
}
